@page "/"

@using System.Timers
@using Bloonsor.BlazorApp.Model

@implements IDisposable

<div>
    <button type="button" @onclick="ClearInflatables">Clear</button>
</div>
<div>
    @foreach (var inflatable in Inflatables)
    {
        <Balloon Inflatable="@inflatable" BalloonPopped="RemoveInflatable"/>
    }
</div>

@code
{
    private Timer? Timer { get; set; }
    private IList<Inflatable> Inflatables { get; set; } = new List<Inflatable>();

    protected override Task OnInitializedAsync()
    {
        Timer = new Timer(2000);
        Timer.Elapsed += TimerOnElapsed;
        Timer.Start();

        return base.OnInitializedAsync();
    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        if (Inflatables.Count >= 10)
        {
            return;
        }

        var inflatable = GetInflatable();
        Inflatables.Add(inflatable);

        StateHasChanged();
    }

    private void ClearInflatables()
    {
        Inflatables.Clear();
    }

    private Inflatable GetInflatable()
    {
        var random = new Random();

        var balloonNumber = random.Next(1, 4);
        var top = random.Next(500);
        var left = random.Next(1000);

        var inflatable = new Inflatable
            {
                ImageFileName = $"balloon{balloonNumber}.png",
                PositionTop = top,
                PositionLeft = left
            };

        return inflatable;
    }

    private void RemoveInflatable(Inflatable inflatable)
    {
        Inflatables.Remove(inflatable);
    }

    public void Dispose()
    {
        if (Timer is not null)
        {
            Timer.Stop();
            Timer.Dispose();
        }
    }
}
